import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from sklearn import tree

# 1. Build a classification model that predicts the edibility of mushrooms (class variable in the dataset). You have been provide with a dataset as a mushrooms.csv file.
# Build a classification tree. Random_state =2020. Training partition 0.7. stratify = y, max_depth = 6, use Entropy (8 marks)
# A. Read the dataset, explore it and determine what is the dependent variable (1 mark)
# B. Store the feature and target variable. (2 marks)
# C. Convert all categorical variables into dummy variables (1 mark)
# D. Partition the data into training and test sets (70/30) (1 mark)
# E. Fit the training data to a classification tree. (3 marks)
from google.colab import files 
uploaded = files.upload()
mush = pd.read_csv('mushrooms.csv')
mushDf = pd.DataFrame(mush)
# dependent variable = class

# turn categorical variables into dummies
mushDf2 = pd.get_dummies(mushDf, columns=['cap-shape', 'cap-surface', 'cap-color', 'bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'])
print(mushDf2)

# set feature variables X and target (response) variable y
X = mushDf2.loc[:, 'cap-shape_b':'habitat_w']
# [['cap-shape', 'cap-surface', 'cap-color', 'bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat']]
y = mushDf['class']

# split up test and training data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2020, stratify=y)

# create decision tree classifier
dt = DecisionTreeClassifier(criterion='entropy')
dt.fit(X_train, y_train)

# Print the confusion matrix. Also visualize the confusion matrix using plot_confusion_matrix from sklearn.metrics (3 marks)
y_pred = dt.predict(X_test)

cf = metrics.confusion_matrix(y_test, y_pred)
print(cf)

metrics.plot_confusion_matrix(dt, X_test, y_test)
plt.show()

# Print the accuracy on the training partition? (2 marks)
training_pred = dt.predict(X_train)
acc_training = accuracy_score(training_pred, y_train)
print('Training Accuracy =', acc_training)

# Print the accuracy on the test partition? (2 marks)
print('Test Accuracy =', accuracy_score(y_test, y_pred))

# Show the classification tree and save it (5 marks)
plt.figure(2)
mushTree = tree.plot_tree(dt)
plt.show()

plt.figure(2)
plt.figure(figsize=(20,20))
fn = X.columns
cn = y.unique()
mushTree = tree.plot_tree(dt, feature_names=fn, class_names=cn, filled=True)
plt.savefig('mushDT.png')
plt.show()

# Find and print the top three most important features in your decision tree for determining toxicity. (4 marks)
print('Feature Importance:', dt.feature_importances_)
imp=pd.DataFrame(zip(X_train.columns, dt.feature_importances_))
print(imp)

print("IMPORTANT FEATURES: odor, bruises, stalk root")

# Classify the following mushroom. (6 marks)
print("CLASS: e")

